import com.gradle.scan.plugin.PublishedBuildScan

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */
plugins {
    id 'com.gradle.build-scan' version '2.0.2'
    id 'java'
}

buildScan {
    background {
        def commitId = 'git rev-parse --verify head'.execute().text.trim()
        value 'git commit id', commitId
        System.getenv().each {
            en ->
                value en.getKey(), en.getValue()
        }
    }
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
    link 'git', 'https://github.com/charseli/gradle.git'
    value 'Build file', project.buildDir.getAbsolutePath()
    value 'Build Num', project.plugins.getProperties().size().toString()
//    publishAlways() //each time
//    publishAlwaysIf(false)
//    publishOnFailure()
//    publishOnFailureIf(false)
    publishAlways()
    if (System.getenv('CI')) {
        tag 'CI'
    } else {
        tag 'Local'
    }
    buildFinished { BuildResult result ->
        value 'disk usage output dir', buildDir.directorySize().toString()
        if (result.failure) {
            value 'Failed with', result.failure.message
        }
    }
    buildScanPublished { PublishedBuildScan sc ->
        file('scan-journal.log') << "${new Date()} - ${sc.buildScanId} - ${sc.buildScanUri}\n"
    }
}
   